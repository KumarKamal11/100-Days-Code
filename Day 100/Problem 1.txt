Day 100: Problem-1

You are given two strings s and t consisting of only lowercase English letters.
Return the minimum number of characters that need to be appended to the end of 
s so that t becomes a subsequence of s. A subsequence is a string that can be 
derived from another string by deleting some or no characters without changing 
the order of the remaining characters.

Example 1:
Input: s = "coaching", t = "coding"
Output: 4
Explanation: Append the characters "ding" to the end of s so that s = "coachingding".
Now, t is a subsequence of s ("coachingding").
It can be shown that appending any 3 characters to the end of s will never make t a subsequence.

Approach:

To make t a subsequence of s, we need to find the longest prefix of t that is already
a subsequence of s. The remaining characters of t that are not part of this longest 
prefix will need to be appended to the end of s.

We start the 2 pointers at the start of the s and t. we start a while loop which checks if the
char at these 2 indices are same or not. If same move on to the next char if not only move index 
of S to search for the next char in T. After the loop We know how many chars covered and how many 
left to cover return the remaining number of chars to cover.


Code:
    int appendCharacters(string s, string t) {
        
        int i=0;
        int j=0;

        while(i<s.length() && j<t.length()){
            if(s[i]==t[j]){
                i++;
                j++;
            }
            else{
                i++;
            }
        }
        return t.length()-j;
    }
