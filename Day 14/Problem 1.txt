Day 14: Problem-1

Problem: Valid Expression

Given a string S, composed of different combinations of '(' , ')', '{', '}', '[', ']'. The task is to verify the validity of the arrangement.
An input string is valid if:

         1. Open brackets must be closed by the same type of brackets.
         2. Open brackets must be closed in the correct order.


Problem Link: https://www.geeksforgeeks.org/problems/valid-expression1025/0
Difficulty Level:Medium
Topics:Stack

Approach:
The Simple Approach of this Problem is to checks the validity of the arrangement of brackets by ensuring
that each opening bracket is correctly matched and closed by the corresponding closing bracket and in the correct order.

The Following steps should be followed 

1.Iterate through each character in the string s.
2.If the current character is an opening bracket ('(', '{', '['), push it onto the stack.
3.If the current character is a closing bracket (')', '}', ']'), check if the stack is empty. 
  If it is, it means there is no corresponding opening bracket for the current closing bracket,
  so the string is invalid. Return false.
4.If the stack is not empty, pop the top element from the stack and compare it with the current closing bracket.
5.If the popped opening bracket matches the current closing bracket, continue to the next character in the string.
6.If the popped opening bracket does not match the current closing bracket, return false as the arrangement of brackets is invalid.
7.After processing all characters in the string, if the stack is empty, it means all opening brackets were closed in the correct order. Return true. Otherwise, return false.

Code:
  bool valid(string s)
 {
    // code here
    stack<char>st; 
        for(auto it: s) {
            if(it=='(' || it=='{' || it == '['){
            st.push(it); 
            }
            else {
                if(st.size() == 0){  
                return false; 
                }
                char ch = st.top(); 
                st.pop(); 
                if((it == ')' and ch == '(') or 
                   (it == ']' and ch == '[') or 
                   (it == '}' and ch == '{')){
                   continue;
                  }
                else {
                return false;
               }
            }
        }
        return st.empty(); 
 } 
