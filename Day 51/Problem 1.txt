Day 51: Problem-1

Problem:  1700. Number of Students Unable to Eat Lunch

The school cafeteria offers circular and square sandwiches at lunch break,
referred to by numbers 0 and 1 respectively. All students stand in a queue.
Each student either prefers square or circular sandwiches.The number of 
sandwiches in the cafeteria is equal to the number of students. The sandwiches
are placed in a stack. At each step, If the student at the front of the queue 
prefers the sandwich on the top of the stack, they will take it and leave the queue.
Otherwise, they will leave it and go to the queue's end.This continues until none 
of the queue students want to take the top sandwich and are thus unable to eat.
You are given two integer arrays students and sandwiches where sandwiches[i] is the 
type of the i​​​​​​th sandwich in the stack (i = 0 is the top of the stack) and students[j] 
is the preference of the j​​​​​​th student in the initial queue (j = 0 is the front of the queue).
Return the number of students that are unable to eat.

Problem Link: https://leetcode.com/problems/number-of-students-unable-to-eat-lunch/description/?envType=daily-question&envId=2024-04-08
Topics: Stacks,Queues

Approach

The thought that comes to mind after reading the problem is that, for example, if the top sandwich is 0
and there are no students in the queue who want 0, all of them want 1, then no matter how many times we 
rotate the queue no one will pick that sandwhich and the number of remaining students wanting 1 will not 
get any sandwhich.

1. Count the number os 0's and1's.
2. Iterate through sandwiches and go on decrementing the values of 0's and1's.
3. When either of the count is less that 0, that means no student in the queue,
   wants that top sandwhich. Thus return the other non-negative count of remaining
   students.
4. If all the students get their sandwhiches then return 0.

Code:
  int countStudents(vector<int>& students, vector<int>& sandwiches) {
        int cnt_0=0;
        int cnt_1=0;
        for(int i=0;i<students.size();i++){
            if(students[i]==1){
                cnt_1++;
            }
            else{
                cnt_0++;
            }
        }
        for(int i=0;i<sandwiches.size();i++){
            int sand=sandwiches[i];
            if(sand==0){
                cnt_0--;
            }
            if(sand==1){
                cnt_1--;
            }

            if(cnt_1 < 0){
                return cnt_0;
            }
            if(cnt_0 < 0){
                return cnt_1;
            }
        }
        return 0;
    }
