Day 1: Problem-1

Problem: 74. Search a 2D Matrix
Problem Link: https://leetcode.com/problems/search-a-2d-matrix/description/
Difficulty Level: Medium
Topics: Array,Binary Search,Matrix

Approach:
The intuition behind this approach is to first find the Potential row where the target could be located based on the condition that the last element of each row is greater than or equal to the target.
Then, once we have identified the potential row, we perform a Binary search within that row to check if the target exists.

Code:
bool searchMatrix(vector<vector<int>>& matrix, int target) {
       int n=matrix.size(); // row
       int m=matrix[0].size(); // colm
       int start=0,end=n*m-1,mid;
         while(start<=end){
          mid=start+(end-start)/2;
          int rowindex=mid/m;
          int colindex=mid%m;
          if(matrix[rowindex][colindex]==target){
              return 1;
          }
          else if(matrix[rowindex][colindex]<target){
              start=mid+1;
          }
          else{
              end=mid-1;
          }
      }
      return 0;
    }


2nd Problem:

Problem: Search in a row-column sorted Matrix
Problem Link:https://www.geeksforgeeks.org/problems/search-in-a-matrix-1587115621/0
Difficulty Level:Medium
Topics: Array,Binary Search,Matrix

Intution:
Used staircase search algorithm since matrix is sorted both row and column wise to reduce the search space.
Steps:
1. Start at 0th row and M-1 columns
2. If curr ele is the target return true
3. If curr ele is greater than target then it must be in previous columns so reduce j
   else increase i
4. If not found till the end of loop return False

Code:
  bool search(vector<vector<int> > matrix, int n, int m, int x) 
    {
        int i=0,j=m-1;
        while(i<n && j>=0){
            if(matrix[i][j]==x){
                return 1;
            }
            else if(matrix[i][j]<x){
                i++;
            }
            else{
                j--;
            }
        }
        return 0;
    }
 
