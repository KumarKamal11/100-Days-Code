Day 87: Problem-1

Given an integer array nums, find a subarray that
has the largest product, and return the product.
The test cases are generated so that the answer 
will fit in a 32-bit integer.

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Approach:

The Brute force method says we can simply apply 2 loops for calculaing
all sub-arrays and finding the max product. But, the Optizimed way to 
solve this problem is using Kadane's Algorithm.

The Approach to this question is exactly same as Kadane's Algo the only differece is, we will be traversing the array from both 
sides i.e left to right( lets say the max prod is max1 ) and from right to left ( say max prod is max2 ), now the final answer
will we max of max1 and max2.

Code:
 int maxProduct(vector<int>& nums) {
        int pf=1;
        int max1=INT_MIN;
        int sf=1;
        int max2=INT_MIN;

        for(int i=0;i<nums.size();i++){
            if(pf==0){
                pf=nums[i];
            }
            else{
                pf=pf*nums[i];
            }
            max1=max(pf,max1);
        }
        for(int i=nums.size()-1;i>=0;i--){
            if(sf==0){
                sf=nums[i];
            }
            else{
                sf=sf*nums[i];
            }
            max2=max(sf,max2);
        }

        return max(max1,max2);
    }
