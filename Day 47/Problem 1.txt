Day 47: Problem-1

Problem: 2558. Take Gifts From the Richest Pile 

You are given an integer array gifts denoting the number of gifts in various piles. Every second, you do the following:
Choose the pile with the maximum number of gifts.
If there is more than one pile with the maximum number of gifts, choose any.
Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.
Return the number of gifts remaining after k seconds.

Problem Link: https://leetcode.com/problems/take-gifts-from-the-richest-pile/description/
Topics: Heap

Approach:

Each time we need to find the biggest number in the array, remove it from the array and 
add it's sqaure root value to the array. So we use priority queue to find the largest 
value at any given time.


Step 1: Declare a priority queue (max Heap) and store all the array values in the heap.
Step 2: For k times, pop the top value(this will be biggest value in the array at that point of time)
and add sqrt(value) back to the heap.
Step 3: Repeat Step 2 k times.
Step 4: Add all the remaining elements in the heap and return the summation.

Code:
 long long pickGifts(vector<int>& gifts, int k) {
        priority_queue<long long>pq;
        long long sum=0;
        for(int i=0;i<gifts.size();i++){
            pq.push(gifts[i]);
        }
        while(k--){
            pq.push(sqrt(pq.top()));
            pq.pop();
        }
        while(!pq.empty()){
            sum+=pq.top();
            pq.pop();
        }
        return sum;
    }
