Day 44: Problem-1

Problem: Minimum Cost of ropes

There are given N ropes of different lengths, we need to connect these ropes into one rope. 
The cost to connect two ropes is equal to sum of their lengths. The task is to connect the 
ropes with minimum cost. Given N size array arr[] contains the lengths of the ropes. 

Problem Link:https://www.geeksforgeeks.org/problems/minimum-cost-of-ropes-1587115620/1?page=1&difficulty
Topics: Heap

Approach:

The Simple Approach is to use a priority queue to efficiently select the two shortest ropes for connection
at each step. Initially, all rope lengths are pushed onto the priority queue. Then, in each iteration, 
the two shortest ropes are popped from the queue, their lengths are added to calculate the cost of connection,
and the combined length is pushed back into the priority queue. This process continues until only one rope remains 
in the queue, representing the final connected rope. The priority queue ensures that the ropes with the 
shortest lengths are always selected first for connection, resulting in an optimal solution. Finally, 
the total cost of all connections is calculated and returned. This approach leverages the property of 
priority queues to maintain the minimum element efficiently, leading to a time complexity of O(n log n),
where n is the number of ropes.

Code:
   long long minCost(long long arr[], long long n) {
        priority_queue<long long,vector<long long>,greater<long long>>pq;
        for(int i=0;i<n;i++){
            pq.push(arr[i]);
        }
        long long cost=0;
        while(pq.size()>1){
            long long rope=pq.top();
            pq.pop();
            rope+=pq.top();
            pq.pop();
            cost+=rope;
            pq.push(rope);
        }
        return cost;
    }
