Day 21: Problem-1

Problem:2073. Time Needed to Buy Tickets

There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.
You are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].
Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously)
in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.
Return the time taken for the person at position k (0-indexed) to finish buying tickets.

Problem Link:https: https://leetcode.com/problems/time-needed-to-buy-tickets/description/
Difficulty Level:Easy
Topics: queue

Approach:
1.Initialize variables: 'n' to store the number of people, 'time' to track the time taken, and a queue 'q' to represent the line of people.
2.Populate the queue with indices representing the positions of people in the line.
3.Loop until the person at position 'k' finishes buying tickets.
4.Decrement the number of tickets the person at the front of the line wants to buy.
5.If the person still wants to buy more tickets, move them to the back of the line by pushing their index to the queue and popping them from the front.
6.If the person has finished buying tickets, remove them from the queue.
7.Increment the time taken.
8.Return the total time taken for the person at position 'k' to finish buying tickets. 


Code:
     int timeRequiredToBuy(vector<int>& tickets, int k) {
        int n=tickets.size();
        int time=0;
        queue<int>q;
        for(int i=0;i<n;i++){
            q.push(i);
        }
        while(tickets[k]!=0){
   
        tickets[q.front()]--;
        if(tickets[q.front()]){
            q.push(q.front());
            q.pop();
        }
         else{
          q.pop();
        }
        time++;
        }
        return time;
    }
