Day 19: Problem-1

Problem: The Celebrity Problem.
A celebrity is a person who is known to all but does not know anyone at a party.
If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an 
element of row i and column j  is set to 1 it means ith person knows jth person. 
Here M[i][i] will always be 0.Return the index of the celebrity, if there is no 
celebrity return -1.

Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)

Problem Link:https://www.geeksforgeeks.org/problems/the-celebrity-problem/0
Difficulty Level:Medium
Topics: Stack

Approach:
We can find celebrity in a party using brute force Approach in which we can iterating through
each person in the party and checking if they know anyone and if everyone knows them.But It takes 
O(n^2) time.

The Another Approach is:
We can use a stack to find the celebrity in a party represented by a matrix m of size n x n.

1.We  initializes a stack with indices of all people at the party.
2.It iteratively pops the two person from the stack.
3.If the first person knows the second person (m[first][second]) but the second person doesn't know the first person
(!m[second][first]), it means the first person cannot be a celebrity, so the second person is pushed back onto the stack.
4.If the first person doesn't know the second person (!m[first][second]) but the second person knows the first person 
(m[second][first]), it means the second person cannot be a celebrity, so the first person is pushed back onto the stack.
5.After iterating through all pairs, if there's only one person left in the stack, 
it's checked if this person satisfies the celebrity conditions (known by no one and known by everyone).
6.Finally, it checks if the remaining person fulfills the conditions of being a celebrity and returns their index. 
If no celebrity is found, it returns -1.

The time complexity of this approach is O(N), where N is the number of people at the party.

Code:
   int celebrity(vector<vector<int> >& m, int n) 
    {
        stack<int>st;
        for(int i=0;i<n;i++)
        {
            st.push(i);
        }
        while(st.size()>1){
            int first=st.top();
            st.pop();
            int second=st.top();
            st.pop();
            
            if(m[first][second] && !m[second][first]){
                st.push(second);
            }
            else if(!m[first][second] && m[second][first]){
                st.push(first);
            }
        }
        if(st.empty()){
            return -1;
        }
        int num=st.top();
        st.pop();
        int row=0,col=0;
        for(int i=0;i<n;i++){
            row=row+m[num][i];
            col=col+m[i][num];
        }
        return row==0 && col==n-1 ?num:-1;
    }
