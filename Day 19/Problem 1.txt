Day 18: Problem-1

Problem: The Celebrity Problem.
A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not. A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Return the index of the celebrity, if there is no celebrity return -1.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)

Problem Link:https://www.geeksforgeeks.org/problems/the-celebrity-problem/0
Difficulty Level:Medium
Topics: Stack

Approach:




Code:
    int findMax(vector<int>nums,int start,int end){
        int max=INT_MIN;
        int indx=-1;
        for(int i=start;i<=end;i++){
            if(nums[i]>max){
                max=nums[i];
                indx=i;
            }
        }
        return indx;
    }
    TreeNode* NewTree(vector<int>nums,int start,int end){
        if(start>end){
            return NULL;
        }
        if(start==end){
            return new TreeNode(nums[start]);
        }
        int idx=findMax(nums,start,end);
        TreeNode* root=new TreeNode(nums[idx]);
        root->left=NewTree(nums,start,idx-1);
        root->right=NewTree(nums,idx+1,end);
        return root;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        int start=0;
        int end=nums.size()-1;
        TreeNode* root=NewTree(nums,start,end);
        return root;
    }