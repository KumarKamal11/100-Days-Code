Day 83: Problem-1

Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 
Approach:

We all know that the Inorder Traversal of Binary search tree is sorted.We have
use this concept in this question,We have store the inorder traversal of the tree
in an vector and after that we check each element of vector if any elemnt violate 
the sorted property(arr[i]<=arr[i-1]) then simply we can say that the tree is not 
BST.So return false otherwise return true.

Code:
   void inorder(TreeNode* root,vector<int>& ans){
        if(root==NULL){
            return;
        }
        inorder(root->left,ans);
        ans.push_back(root->val);
        inorder(root->right,ans);
    }
    bool isValidBST(TreeNode* root) {
        vector<int>ans;
        inorder(root,ans);

        for(int i=1;i<ans.size();i++){
            if(ans[i]<=ans[i-1]){
                return false;
                break;
            }
        }
        return true;
    }
