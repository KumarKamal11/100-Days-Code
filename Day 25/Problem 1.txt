Day 24: Problem-1

Problem: 791. Custom Sort String

You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.
Permute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before
a character y in order, then x should occur before y in the permuted string. Return any permutation of s that satisfies this property.

Problem Link: https://leetcode.com/problems/custom-sort-string/description/?envType=daily-question&envId=2024-03-11
Topics: String, Hash Table

Approach:
1.Initialize a map mp to store the count of characters in the string str.
2.Initialize an empty string ans to store the result.
3.Iterate through each character it in the string str and update the count of each character in the map mp.
4.Iterate through each character it in the string order.
5.Check if the character it exists in the map mp.
6.If it exists, retrieve the count of occurrences of character it from the map.
7.Create a string s consisting of count occurrences of character it.
8.Append string s to the result string ans.
9.Remove the character it from the map mp since it's already processed.
10.Iterate through the remaining characters in the map mp.
11.For each character it, create a string s consisting of it.second occurrences of it.first.
12.Append string s to the result string ans.
13.Return the result string ans.


Code:
 string customSortString(string order, string str) {
       map<char,int>mp;
       string ans="";
       for(auto it:str){
           mp[it]++;
       }
       for(auto it:order){
           if(mp.find(it)!=mp.end()){
               auto temp=mp.find(it);
               int count=temp->second;
               string s(count,it);
               ans+=s;
               mp.erase(it);
           }
       }
       for(auto it:mp){
           string s(it.second,it.first);
           ans+=s;
       }
       return ans;
    }
