Day 35: Problem-1

Problem: https://leetcode.com/problems/range-sum-of-bst/description/

Given the root node of a binary search tree and two integers low and high, return the
sum of values of all nodes with a value in the inclusive range [low, high].

Problem Link: https://leetcode.com/problems/range-sum-of-bst/description/
Topics:Binary Search Tree

Approach:
It is an easy question in which we have to given a low value and a high value and we have to return
the sum of all nodes with a value in the given range in Binary search tree.The approach is very simple
in order to calculate the sum we traverse the tree and store the inorder traversal of BST(which is sorted)
in an array. After that we we just calculate the sum in the given range and return the sum. 

Code:
  void inorder(TreeNode* root,vector<int>&ans){
    if(root==NULL){
        return;
    }
    inorder(root->left,ans);
    ans.push_back(root->val);
    inorder(root->right,ans);
}
    int rangeSumBST(TreeNode* root, int low, int high) {
      if(root==NULL){
        return 0;
      }
      vector<int>ans;
      inorder(root,ans);
      int sum=0;
      for(auto it:ans){
        if(it>=low && it<=high){
        sum+=it;
        }
      }
     return sum;  
    }
