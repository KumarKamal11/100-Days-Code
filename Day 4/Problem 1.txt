Day 4: Problem-1

Problem: Remove loop in Linked List
Problem Link: https://www.geeksforgeeks.org/problems/remove-loop-in-linked-list/0
Difficulty Level: Medium
Topics: Linked List

Intution:
We maintains two pointers, slow and fast, iterating through the linked list. The slow pointer move by one node at a time while the fast pointer move by two nodes at a time. If there's a loop, eventually the fast pointer will catch up to the slow pointer.

Once the loop is detected, the code resets the slow pointer to the head of the list and moves both pointers at the same speed until they meet again at the point where the loop begins. This identifies the node just before the loop.

Finally, it traverses the list one more time to find the node just before the loop and breaks the loop by setting its next pointer to NULL. This effectively removes the loop without losing any nodes.


Code:
   void removeLoop(Node* head)
    {
        Node* slow=head,*fast=head;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast){
                break;
            }
        }
        // Check for singly Linked List
        if(fast==NULL || fast->next==NULL){
            return;
        }
        slow=head;
        while(slow!=fast){
            slow=slow->next;
            fast=fast->next;
        }
        while(slow->next!=fast){
            slow=slow->next;
        }
        slow->next=NULL;
    }