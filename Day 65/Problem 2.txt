Day 65: Problem-2

You are given an array of integers nums. You are also given an integer
original which is the first number that needs to be searched for in nums.
You then do the following steps: If original is found in nums, multiply 
it by two (i.e., set original = 2 * original). Otherwise, stop the process.
Repeat this process with the new number as long as you keep finding the number.
Return the final value of original.

Problem Link: https://leetcode.com/problems/keep-multiplying-found-values-by-two/description/

Approach

We have to find the original again and again in array, so we can 
use a hash set to find the elements, which takes O(1) on average.

Code:
       int findFinalValue(vector<int>& nums, int original) {
         unordered_set<int>st;
         for(int i=0;i<nums.size();i++){
            st.insert(nums[i]);
        }
        while(st.find(original)!=st.end()){
            original*=2;
        }  
        return original;
    }
