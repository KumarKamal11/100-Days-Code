Day 15: Problem-1

Problem:2696. Minimum String Length After Removing Substrings

You are given a string s consisting only of uppercase English letters.
You can apply some operations to this string where, in one operation,
you can remove any occurrence of one of the substrings "AB" or "CD" from s.
Return the minimum possible length of the resulting string that you can obtain.
Note that the string concatenates after removing the substring and could produce new "AB" or "CD" substrings.


Problem Link: https://leetcode.com/problems/minimum-string-length-after-removing-substrings/description/
Difficulty Level:Easy
Topics: Stack

Approach:
1.Initialize an empty stack to keep track of characters while traversing the input string.
2.Iterate through each character of the input string.
3.If the stack is empty, push the current character onto the stack.
4.If the current character is 'B':
     Check if the top of the stack is 'A'.
     If it is, pop 'A' from the stack as 'AB' can be removed.
     If not, push 'B' onto the stack.
5.If the current character is 'D':
    Check if the top of the stack is 'C'.
    If it is, pop 'C' from the stack as 'CD' can be removed.
    If not, push 'D' onto the stack.
6.If the current character is neither 'B' nor 'D', push it onto the stack.
7.After iterating through the entire string, return the size of the stack, which represents
the   minimum possible length of the resulting string after removing substrings 'AB' or 'CD'.



Code:
  int minLength(string s) {
        stack<char>st;
        for(int i=0;i<s.length();i++){
            if( st.empty()){
                st.push(s[i]);
            }
            else if(s[i]=='B'){
                char c=st.top();
                if(c=='A'){
                    st.pop();
                }
                else{
                    st.push(s[i]);
                }
            }
            else if(s[i]=='D'){
                char c=st.top();
                if(c=='C'){
                    st.pop();
                }
                else{
                    st.push(s[i]);
                }
            }
            else
            st.push(s[i]);
        }
        return st.size();
    }
