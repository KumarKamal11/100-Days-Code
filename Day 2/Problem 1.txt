Day 2: Problem-1

Problem: 61. Rotate List
Problem Link: https://leetcode.com/problems/rotate-list/description/
Difficulty Level: Medium
Topics: Linked List, Two Pointer

Approach:
The code first handles base cases (empty list or single node). Then, it calculates the length of the list to determine the rotation amount. 
It adjusts 'k' to be within the range of list length (k=k%count). If 'k' becomes 0, no rotation is needed. 
It finds the new tail node by moving 'count - k' steps from the head. The list is broken just before this new tail, making the sub-list the rotated list. The original tail is found, and it's connected to the original head to complete the rotation. Finally, the new head of the rotated list is returned.

Code:
        ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        int count=0;
        ListNode *temp=head;
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }
        k=k%count;
        if(k==0){
            return head;
        }
        count=count-k;
        ListNode *curr=head,*prev=NULL;
        while(count!=0){
            prev=curr;
            curr=curr->next;
            count=count-1;
        }
        prev->next=NULL;
        ListNode *tail=curr;
        while(tail->next!=NULL){
            tail=tail->next;
        }
        tail->next=head;
        return curr;
    }
